name: CI

on:
  push:

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      solution-path: ./src/HassClient.sln
      build-config: Release
    strategy:
      matrix:
        channel:
          - stable

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5.0
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: 5.0.x

    - name: Install trx2junit
      run: |
        export PATH="$PATH:/root/.dotnet/tools"
        dotnet tool install --global trx2junit --version 1.5.0

    - name: Restore dependencies
      run: dotnet restore ${{env.solution-path}}
    - name: Build
      run: dotnet build --no-restore --configuration ${{env.build-config}} ${{env.solution-path}}
      
    - name: ðŸ‘· Setup Home Assistant
      id: homeassistant
      uses: ludeeus/setup-homeassistant@main
      with:
          tag: ${{ matrix.channel }}
          config-dir: ./resources/Tests/config

    - name: âœ… Verify API Access
      run: | 
        curl -sSL -f -X GET \
          -H "Authorization: Bearer ${{ steps.homeassistant.outputs.token }}" \
          -H "Content-Type: application/json" \
          ${{ steps.homeassistant.outputs.url }}/api/states

    - name: Test
      run: dotnet test --no-build --configuration ${{env.build-config}} --logger "trx;LogFileName=test-results.trx" ${{env.solution-path}}
      env:
          TestsInstanceBaseUrl: ${{ steps.homeassistant.outputs.url }}
          TestsAccessToken: ${{ steps.homeassistant.outputs.token }}

    - name: ðŸ“œ Get logs
      if: always()
      run: docker logs ${{ steps.homeassistant.outputs.containername }}

    - uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: ./src/**/*.trx

    - uses: actions/download-artifact@v2.0.8
      with:
        name: test-results
        path: ./test-results

    - name: Convert to JUnit format
      run: trx2junit ./test-results/*.trx

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      with:
        files: ./test-results/*.xml
