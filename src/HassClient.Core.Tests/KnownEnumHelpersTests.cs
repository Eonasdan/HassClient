using HassClient.Helpers;
using HassClient.Models;
using NUnit.Framework;

namespace HassClient.Core.Tests
{
    [TestFixture(TestOf = typeof(KnownEnumHelpers))]
    class KnownEnumHelpersTests
    {
        [Test]
        [TestCase("area_registry_updated")]
        [TestCase("automation_reloaded")]
        [TestCase("call_service")]
        [TestCase("component_loaded")]
        [TestCase("core_config_updated")]
        [TestCase("device_registry_updated")]
        [TestCase("entity_registry_updated")]
        [TestCase("homeassistant_close")]
        [TestCase("homeassistant_final_write")]
        [TestCase("homeassistant_start")]
        [TestCase("homeassistant_stop")]
        [TestCase("logbook_entry")]
        [TestCase("lovelace_updated")]
        [TestCase("panels_updated")]
        [TestCase("persistent_notifications_updated")]
        [TestCase("platform_discovered")]
        [TestCase("service_executed")]
        [TestCase("service_registered")]
        [TestCase("service_removed")]
        [TestCase("scene_reloaded")]
        [TestCase("state_changed")]
        [TestCase("themes_updated")]
        [TestCase("time_changed")]
        [TestCase("timer_out_of_sync")]
        public void AllKnownEventTypesCanBeParsed(string snakeCaseValue)
        {
            var result = snakeCaseValue.AsKnownEventType();
            Assert.AreNotEqual(KnownEventTypes.Any, result);
        }

        [Test]
        [TestCase("adguard")]
        [TestCase("automation")]
        [TestCase("camera")]
        [TestCase("cast")]
        [TestCase("climate")]
        [TestCase("cloud")]
        [TestCase("counter")]
        [TestCase("cover")]
        [TestCase("device_tracker")]
        [TestCase("esphome")]
        [TestCase("fan")]
        [TestCase("filesize")]
        [TestCase("frontend")]
        [TestCase("generic")]
        [TestCase("generic_thermostat")]
        [TestCase("group")]
        [TestCase("hassio")]
        [TestCase("homeassistant")]
        [TestCase("html5")]
        [TestCase("input_boolean")]
        [TestCase("input_datetime")]
        [TestCase("input_number")]
        [TestCase("input_select")]
        [TestCase("input_text")]
        [TestCase("light")]
        [TestCase("lock")]
        [TestCase("logbook")]
        [TestCase("logger")]
        [TestCase("media_player")]
        [TestCase("mqtt")]
        [TestCase("notify")]
        [TestCase("number")]
        [TestCase("persistent_notification")]
        [TestCase("person")]
        [TestCase("python_script")]
        [TestCase("recorder")]
        [TestCase("remote")]
        [TestCase("scene")]
        [TestCase("script")]
        [TestCase("speedtestdotnet")]
        [TestCase("stream")]
        [TestCase("switch")]
        [TestCase("system_log")]
        [TestCase("template")]
        [TestCase("timer")]
        [TestCase("tts")]
        [TestCase("vacuum")]
        [TestCase("wake_on_lan")]
        [TestCase("webos_tv")]
        [TestCase("xiaomi_miio")]
        [TestCase("zha")]
        [TestCase("zone")]
        public void AllKnownDomainsCanBeParsed(string snakeCaseValue)
        {
            var result = snakeCaseValue.AsKnownDomain();
            Assert.AreNotEqual(KnownDomains.Undefined, result);
        }

        [Test]
        [TestCase("create")]
        [TestCase("decrement")]
        [TestCase("dismiss")]
        [TestCase("increment")]
        [TestCase("pause")]
        [TestCase("record")]
        [TestCase("reload")]
        [TestCase("remove")]
        [TestCase("send_command")]
        [TestCase("set_value")]
        [TestCase("start")]
        [TestCase("stop")]
        [TestCase("toggle")]
        [TestCase("turn_off")]
        [TestCase("turn_on")]
        [TestCase("add_url")]
        [TestCase("disable_url")]
        [TestCase("enable_url")]
        [TestCase("refresh")]
        [TestCase("remove_url")]
        [TestCase("trigger")]
        [TestCase("disable_motion_detection")]
        [TestCase("enable_motion_detection")]
        [TestCase("play_stream")]
        [TestCase("snapshot")]
        [TestCase("show_lovelace_view")]
        [TestCase("set_aux_heat")]
        [TestCase("set_fan_mode")]
        [TestCase("set_humidity")]
        [TestCase("set_hvac_mode")]
        [TestCase("set_preset_mode")]
        [TestCase("set_swing_mode")]
        [TestCase("set_temperature")]
        [TestCase("remote_connect")]
        [TestCase("remote_disconnect")]
        [TestCase("configure")]
        [TestCase("reset")]
        [TestCase("close_cover")]
        [TestCase("close_cover_tilt")]
        [TestCase("open_cover")]
        [TestCase("open_cover_tilt")]
        [TestCase("set_cover_position")]
        [TestCase("set_cover_tilt_position")]
        [TestCase("stop_cover")]
        [TestCase("stop_cover_tilt")]
        [TestCase("toggle_cover_tilt")]
        [TestCase("see")]
        [TestCase("oscillate")]
        [TestCase("set_direction")]
        [TestCase("set_speed")]
        [TestCase("reload_themes")]
        [TestCase("set_theme")]
        [TestCase("set")]
        [TestCase("addon_restart")]
        [TestCase("addon_start")]
        [TestCase("addon_stdin")]
        [TestCase("addon_stop")]
        [TestCase("host_reboot")]
        [TestCase("host_shutdown")]
        [TestCase("restore_full")]
        [TestCase("restore_partial")]
        [TestCase("snapshot_full")]
        [TestCase("snapshot_partial")]
        [TestCase("check_config")]
        [TestCase("reload_core_config")]
        [TestCase("restart")]
        [TestCase("set_location")]
        [TestCase("update_entity")]
        [TestCase("set_datetime")]
        [TestCase("select_first")]
        [TestCase("select_last")]
        [TestCase("select_next")]
        [TestCase("select_option")]
        [TestCase("select_previous")]
        [TestCase("set_options")]
        [TestCase("lock")]
        [TestCase("open")]
        [TestCase("unlock")]
        [TestCase("log")]
        [TestCase("set_default_level")]
        [TestCase("set_level")]
        [TestCase("clear_playlist")]
        [TestCase("media_next_track")]
        [TestCase("media_pause")]
        [TestCase("media_play")]
        [TestCase("media_play_pause")]
        [TestCase("media_previous_track")]
        [TestCase("media_seek")]
        [TestCase("media_stop")]
        [TestCase("play_media")]
        [TestCase("repeat_set")]
        [TestCase("select_sound_mode")]
        [TestCase("select_source")]
        [TestCase("shuffle_set")]
        [TestCase("volume_down")]
        [TestCase("volume_mute")]
        [TestCase("volume_set")]
        [TestCase("volume_up")]
        [TestCase("dump")]
        [TestCase("publish")]
        [TestCase("notify")]
        [TestCase("persistent_notification")]
        [TestCase("mark_read")]
        [TestCase("purge")]
        [TestCase("delete_command")]
        [TestCase("learn_command")]
        [TestCase("apply")]
        [TestCase("speedtest")]
        [TestCase("clear")]
        [TestCase("write")]
        [TestCase("cancel")]
        [TestCase("finish")]
        [TestCase("clear_cache")]
        [TestCase("cloud_say")]
        [TestCase("google_say")]
        [TestCase("clean_spot")]
        [TestCase("locate")]
        [TestCase("return_to_base")]
        [TestCase("set_fan_speed")]
        [TestCase("start_pause")]
        [TestCase("send_magic_packet")]
        [TestCase("button")]
        [TestCase("command")]
        [TestCase("select_sound_output")]
        [TestCase("vacuum_clean_segment")]
        [TestCase("vacuum_clean_zone")]
        [TestCase("vacuum_goto")]
        [TestCase("vacuum_remote_control_move")]
        [TestCase("vacuum_remote_control_move_step")]
        [TestCase("vacuum_remote_control_start")]
        [TestCase("vacuum_remote_control_stop")]
        [TestCase("issue_zigbee_cluster_command")]
        [TestCase("issue_zigbee_group_command")]
        [TestCase("permit")]
        [TestCase("set_zigbee_cluster_attribute")]
        [TestCase("warning_device_squawk")]
        [TestCase("warning_device_warn")]
        public void AllKnownServicesCanBeParsed(string snakeCaseValue)
        {
            var result = snakeCaseValue.AsKnownService();
            Assert.AreNotEqual(KnownServices.Undefined, result);
        }
    }
}
